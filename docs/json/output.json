{
  "Select": {
    "tags": {
      "brief": "A styled dropdown (select) component.",
      "intro": "Renders a `<select>` like element styled according to theme context. Supports multiple sizes\nand validation states.",
      "example": "import { Select } from '@lite-u/ui'\n\n<Select s defaultValue={'2'}>\n  <SelectItem value={'1'}>1</SelectItem>\n  <SelectItem value={'2'}>2</SelectItem>\n  <SelectItem value={'3'}>3</SelectItem>\n</Select>"
    },
    "props": {
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Extra small size variant for the select."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Small size variant for the select."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Medium size variant for the select."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Large size variant for the select."
      },
      "disabled": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Set Select to disabled."
      },
      "itemStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": "Custom styles applied to each `SelectItem` within the dropdown."
      },
      "selectValue": {
        "type": "string | number",
        "required": false,
        "defaultValue": "\\-",
        "description": "The initial selected value of the select component."
      },
      "onSelectChange": {
        "type": "(value: string | number) => void",
        "required": false,
        "defaultValue": "\\-",
        "description": "Callback fired when the selected value changes.\nReceives the new value as a string or number."
      }
    }
  },
  "SelectItem": {
    "tags": {
      "brief": "An individual selectable item used within the Select dropdown.",
      "intro": "Displays a styled item that responds to click and keyboard interactions. Automatically highlights when selected.\nMust be used inside a `Select` component to inherit context.",
      "example": "import { Select, SelectItem } from '@lite-u/ui'\n\n<Select>\n  <SelectItem value=\"1\">Option 1</SelectItem>\n  <SelectItem value=\"2\">Option 2</SelectItem>\n</Select>"
    },
    "props": {}
  },
  "ButtonBase": {
    "tags": {},
    "props": {
      "type": {
        "type": "\"button\" | \"reset\" | \"submit\"",
        "required": false,
        "defaultValue": "button",
        "description": ""
      }
    }
  },
  "Button": {
    "tags": {
      "brief": "A customizable button component that supports size and color variants.",
      "intro": "Supports four sizes (xs, s, m, l) and four variants (primary, neutral, warn, error).",
      "example": "import { Button } from '@lite-u/ui'\n\n<Button>Default</Button>\n<Button primary xs>Confirm</Button>\n<Button error l>Delete</Button>"
    },
    "props": {
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Extra small button. Sizing depends on theme."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Small button. Sizing depends on theme."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Medium button. Sizing depends on theme."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Large button. Sizing depends on theme."
      },
      "primary": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies the primary color style."
      },
      "neutral": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies the neutral color style."
      },
      "warn": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies the warning color style."
      },
      "error": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies the error color style."
      }
    }
  },
  "IconButton": {
    "tags": {
      "brief": "A square-shaped button designed to contain only an icon, not text.",
      "intro": "Renders a circular or square icon-only button with predefined size variants.\nSupports four sizes and applies consistent styling from theme context.",
      "example": "import { IconButton } from '@lite-u/ui'\nimport { Icon } from '@lite-u/icons'\n\n<IconButton s onClick={handleClick}>\n  <Icon name=\"search\" />\n</IconButton>"
    },
    "props": {
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Applies the extra small size variant to the button."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Applies the small size variant to the button."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Applies the small size variant to the button."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Applies the large size variant to the button."
      }
    }
  },
  "Input": {
    "tags": {
      "brief": "A stylized input field supporting text and number types with size and color variants.",
      "intro": "Renders either a text or number input with support for theming, sizing, and validation states.\nStyling is pulled from the Lite UI theme context and adjusted according to provided props.",
      "example": "import { Input } from '@lite-u/ui'\n\n<Input placeholder=\"Your name\" />\n<Input number step={0.1} error />\n<Input label=\"Username\" s primary />"
    },
    "props": {
      "label": {
        "type": "string",
        "required": false,
        "defaultValue": "''",
        "description": "Optional label to display as the `<label>`."
      },
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Extra small size variant for the input."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Small size variant for the input."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Medium size variant for the input."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Large size variant for the input."
      },
      "number": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders a number input instead of a text input."
      },
      "primary": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Applies primary styling to the input field."
      },
      "warn": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Applies warning styling to the input field."
      },
      "error": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Applies error styling to the input field."
      },
      "neutral": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Applies neutral styling to the input field."
      },
      "disabled": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Set Input disabled."
      },
      "labelStyle": {
        "type": "{}",
        "required": false,
        "defaultValue": "{}",
        "description": "Inline styles to customize the label."
      }
    }
  },
  "Link": {
    "tags": {
      "brief": "Represents a hyperlink component with consistent styling and optional behavior controls.",
      "intro": "Renders a styled `<a>` element for internal or external navigation, supporting accessibility and customization options.",
      "example": "import { Link } from '@lite-u/ui'\n\n<Link href=\"https://example.com\" target=\"_blank\">\n    Visit Example\n</Link>"
    },
    "props": {
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, the link will take up the full width of its container."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, the link will take up the full height of its container."
      }
    }
  },
  "LiteUIProvider": {
    "tags": {},
    "props": {}
  },
  "Transition": {
    "tags": {
      "brief": "Animates itself.",
      "intro": "To apply animations to elements typically requires external libraries or CSS files. For simplicity and control, `Transition` implements inline animations, putting all animation-related properties under your direct management.\n\n\\\n✅️ `Tips`: Always remember: `Transition` is the direct receiver of the animation and serves as the true boundary between the wrapped component and its parent. If you wrap a component with `Transition`, be sure to apply the corresponding styles directly to `Transition`.",
      "example": "import { Con, Button, Transition } from '@lite-u/ui'\n\nconst Sample = () => {\n  const [show, setShow] = useState(false)\n\n  return <Con w={100} h={100}>\n    <Button onClick={() => setShow(!show)}>Toggle</Button>\n    <Transition from={{opacity: 0, scale: 0.9}} to={{opacity: 1, scale: 1}} visible={show}>\n      <div>Hello world</div>\n    </Transition>\n  )\n}"
    },
    "props": {
      "visible": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Whether the transition should be visible.\nIf true, transition animates to `to` styles; otherwise, animates to `from`."
      },
      "from": {
        "type": "FromType",
        "required": false,
        "defaultValue": "{}",
        "description": "The initial styles before transition starts.\nCan contain raw CSS values or detailed timing configurations."
      },
      "to": {
        "type": "FromType",
        "required": false,
        "defaultValue": "{}",
        "description": "The target styles to animate toward when `visible` is true.\nCan contain raw CSS values or detailed timing configurations."
      },
      "transformOrigin": {
        "type": "string",
        "required": false,
        "defaultValue": "center",
        "description": "CSS `transform-origin` value for the transition.\nControls the origin point of scaling/rotating transforms."
      },
      "effect": {
        "type": "TimingFunction",
        "required": false,
        "defaultValue": "ease",
        "description": "Default timing function for all transitions unless overridden per-property."
      },
      "duration": {
        "type": "number",
        "required": false,
        "defaultValue": "300",
        "description": "Default duration in milliseconds for entering transitions unless overridden per-property."
      },
      "exitDuration": {
        "type": "number",
        "required": false,
        "defaultValue": "300",
        "description": "Default duration in milliseconds for leaving transitions unless overridden per-property."
      },
      "delay": {
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "Default delay in milliseconds before starting the transition unless overridden per-property."
      },
      "onAnimationEntered": {
        "type": "VoidFunction",
        "required": false,
        "defaultValue": "\\-",
        "description": "Called when the enter transition finishes."
      },
      "onAnimationExited": {
        "type": "VoidFunction",
        "required": false,
        "defaultValue": "\\-",
        "description": "Called when the exit transition finishes."
      },
      "onAnimationEnterCancel": {
        "type": "VoidFunction",
        "required": false,
        "defaultValue": "\\-",
        "description": "Called if the enter transition is canceled (e.g., unmount during enter)."
      },
      "onAnimationExitCancel": {
        "type": "VoidFunction",
        "required": false,
        "defaultValue": "\\-",
        "description": "Called if the exit transition is canceled (e.g., re-enter during exit)."
      }
    }
  },
  "Modal": {
    "tags": {
      "brief": "A flexible modal dialog component that overlays content on top of the existing UI.",
      "intro": "Renders children inside a centered modal container with a customizable backdrop and style.\nSupports optional backdrop click handling.",
      "example": "import { Modal } from '@lite-u/ui'\n\n<Modal onBackdropClick={() => setOpen(false)}>\n  <div>Modal Content</div>\n</Modal>"
    },
    "props": {
      "onBackdropClick": {
        "type": "VoidFunction",
        "required": false,
        "defaultValue": "\\-",
        "description": "Callback invoked when the backdrop is clicked."
      },
      "backdropBg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "rgba(0,0,0,.5)",
        "description": "Background color of the backdrop overlay."
      }
    }
  },
  "Panel": {
    "tags": {
      "brief": "A flexible container component used to group and visually separate content within the layout.",
      "intro": "Provides a styled block container with customizable margin, padding, and background options.\nCommonly used to structure and emphasize content sections in a UI.",
      "example": "import { Panel } from '@lite-u/ui'\n\n<Panel p={20} bg=\"#fff\">\n  <h2>Section Title</h2>\n  <p>This is a section of content within a panel.</p>\n</Panel>"
    },
    "props": {
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets the panel size to extra small (`xs`)."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets the panel size to small (`sm`)."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets the panel size to medium (`md`)."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets the panel size to large (`lg`)."
      },
      "head": {
        "type": "ReactNode",
        "required": true,
        "defaultValue": "\\-",
        "description": "The head part displayed in the panel header."
      },
      "headStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": "Optional custom styles for the head container."
      },
      "contentStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": "Optional custom styles for the panel content container."
      }
    }
  },
  "Row": {
    "tags": {
      "brief": "A horizontal flex container with shorthand alignment and spacing props.",
      "intro": "A layout component built on top of `Flex`, providing horizontal flow and useful alignment helpers like `start`, `center`, `stretch`, `wrap`, and `space`.\nSupports extended `ContainerProps`.",
      "example": "import { Container } from '@lite-u/ui'\n\n<Row center space={10} wrap>\n  <span>1</span>\n  <span>2</span>\n  <span>3</span>\n</Row>"
    },
    "props": {
      "start": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Align items to the start vertically."
      },
      "center": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Align items to the center vertically."
      },
      "stretch": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Stretch items to fill the container vertically."
      },
      "end": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Align items to the end vertically."
      },
      "wrap": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, allows child elements to wrap onto multiple lines."
      },
      "around": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justify content with space around."
      },
      "jc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justify content to the center horizontally."
      },
      "js": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the start horizontally."
      },
      "je": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the end horizontally."
      },
      "between": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justify content with space between items."
      },
      "space": {
        "type": "Gap<string | number>",
        "required": false,
        "defaultValue": "0",
        "description": "Gap between child elements."
      },
      "m": {
        "type": "Margin<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin of the container."
      },
      "l": {
        "type": "Left<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `left` value."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, sets width to 100%."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets height to 100%."
      },
      "border": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies a 1px solid border with the specified border color."
      },
      "borderColor": {
        "type": "BorderColor",
        "required": false,
        "defaultValue": "#dfdfdf",
        "description": "Color of the border."
      },
      "flex": {
        "type": "Flex<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Flex of the container."
      },
      "box": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies `box-sizing: border-box` to the container."
      },
      "ovh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: hidden`."
      },
      "ova": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: auto`."
      },
      "tl": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the left."
      },
      "tc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the center."
      },
      "tr": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the right."
      },
      "bg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "\\-",
        "description": "Background color of the container."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "\\-",
        "description": "Text color of the container."
      },
      "fz": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Font size of the container text."
      },
      "rounded": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies border-radius of 5px."
      },
      "ib": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets display to inline-block."
      },
      "abs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to absolute."
      },
      "rela": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to relative."
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to fixed."
      },
      "t": {
        "type": "Top<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `top` value."
      },
      "r": {
        "type": "Right<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `right` value."
      },
      "b": {
        "type": "Bottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `bottom` value."
      },
      "p": {
        "type": "Padding<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding of the container."
      },
      "pt": {
        "type": "PaddingTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding top of the container."
      },
      "pr": {
        "type": "PaddingRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding right of the container."
      },
      "pb": {
        "type": "PaddingBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding bottom of the container."
      },
      "pl": {
        "type": "PaddingLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding left of the container."
      },
      "mt": {
        "type": "MarginTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin top of the container."
      },
      "mr": {
        "type": "MarginRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin right of the container."
      },
      "mb": {
        "type": "MarginBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin bottom of the container."
      },
      "ml": {
        "type": "MarginLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin left of the container."
      },
      "maxW": {
        "type": "MaxWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum width of the container."
      },
      "maxH": {
        "type": "MaxHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum height of the container."
      },
      "minW": {
        "type": "MinWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum width of the container."
      },
      "minH": {
        "type": "MinHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum height of the container."
      },
      "w": {
        "type": "Width<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Width of the container."
      },
      "h": {
        "type": "Height<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Height of the container."
      }
    }
  },
  "Column": {
    "tags": {
      "brief": "A flexible vertical layout container built on top of the Flex component.",
      "intro": "Arranges children in a column direction using Flexbox. Supports alignment props\nlike `start`, `center`, `end`, and spacing between items using the `space` prop.",
      "example": "import { Column } from '@lite-u/ui'\n// Col is an alias of Column\nimport { Col } from '@lite-u/ui'\n\n<Column center space={16}>\n  <div>Item 1</div>\n  <div>Item 2</div>\n</Column>"
    },
    "props": {
      "start": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Aligns children to the start of the column (left by default)."
      },
      "center": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Aligns children to the center of the column."
      },
      "stretch": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Stretches children to fill the column width."
      },
      "end": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Aligns children to the end of the column (right by default)."
      },
      "space": {
        "type": "Gap<string | number>",
        "required": false,
        "defaultValue": "0",
        "description": "Defines spacing between children using the CSS `gap` property."
      },
      "wrap": {
        "type": "never",
        "required": false,
        "defaultValue": "false",
        "description": "If true, allows child elements to wrap onto multiple columns."
      },
      "around": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children with space around them."
      },
      "between": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children with space between them."
      },
      "jc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the center vertically."
      },
      "js": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the start vertically."
      },
      "je": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the end vertically."
      },
      "m": {
        "type": "Margin<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin of the container."
      },
      "l": {
        "type": "Left<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `left` value."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, sets width to 100%."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets height to 100%."
      },
      "border": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies a 1px solid border with the specified border color."
      },
      "borderColor": {
        "type": "BorderColor",
        "required": false,
        "defaultValue": "#dfdfdf",
        "description": "Color of the border."
      },
      "flex": {
        "type": "Flex<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Flex of the container."
      },
      "box": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies `box-sizing: border-box` to the container."
      },
      "ovh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: hidden`."
      },
      "ova": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: auto`."
      },
      "tl": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the left."
      },
      "tc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the center."
      },
      "tr": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the right."
      },
      "bg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "\\-",
        "description": "Background color of the container."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "\\-",
        "description": "Text color of the container."
      },
      "fz": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Font size of the container text."
      },
      "rounded": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies border-radius of 5px."
      },
      "ib": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets display to inline-block."
      },
      "abs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to absolute."
      },
      "rela": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to relative."
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to fixed."
      },
      "t": {
        "type": "Top<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `top` value."
      },
      "r": {
        "type": "Right<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `right` value."
      },
      "b": {
        "type": "Bottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `bottom` value."
      },
      "p": {
        "type": "Padding<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding of the container."
      },
      "pt": {
        "type": "PaddingTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding top of the container."
      },
      "pr": {
        "type": "PaddingRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding right of the container."
      },
      "pb": {
        "type": "PaddingBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding bottom of the container."
      },
      "pl": {
        "type": "PaddingLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding left of the container."
      },
      "mt": {
        "type": "MarginTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin top of the container."
      },
      "mr": {
        "type": "MarginRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin right of the container."
      },
      "mb": {
        "type": "MarginBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin bottom of the container."
      },
      "ml": {
        "type": "MarginLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin left of the container."
      },
      "maxW": {
        "type": "MaxWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum width of the container."
      },
      "maxH": {
        "type": "MaxHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum height of the container."
      },
      "minW": {
        "type": "MinWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum width of the container."
      },
      "minH": {
        "type": "MinHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum height of the container."
      },
      "w": {
        "type": "Width<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Width of the container."
      },
      "h": {
        "type": "Height<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Height of the container."
      }
    }
  },
  "Col": {
    "tags": {},
    "props": {
      "start": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Aligns children to the start of the column (left by default)."
      },
      "center": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Aligns children to the center of the column."
      },
      "stretch": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Stretches children to fill the column width."
      },
      "end": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Aligns children to the end of the column (right by default)."
      },
      "space": {
        "type": "Gap<string | number>",
        "required": false,
        "defaultValue": "0",
        "description": "Defines spacing between children using the CSS `gap` property."
      },
      "wrap": {
        "type": "never",
        "required": false,
        "defaultValue": "false",
        "description": "If true, allows child elements to wrap onto multiple columns."
      },
      "around": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children with space around them."
      },
      "between": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children with space between them."
      },
      "jc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the center vertically."
      },
      "js": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the start vertically."
      },
      "je": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Justifies children to the end vertically."
      },
      "m": {
        "type": "Margin<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin of the container."
      },
      "l": {
        "type": "Left<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `left` value."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, sets width to 100%."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets height to 100%."
      },
      "border": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies a 1px solid border with the specified border color."
      },
      "borderColor": {
        "type": "BorderColor",
        "required": false,
        "defaultValue": "#dfdfdf",
        "description": "Color of the border."
      },
      "flex": {
        "type": "Flex<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Flex of the container."
      },
      "box": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies `box-sizing: border-box` to the container."
      },
      "ovh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: hidden`."
      },
      "ova": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: auto`."
      },
      "tl": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the left."
      },
      "tc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the center."
      },
      "tr": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the right."
      },
      "bg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "\\-",
        "description": "Background color of the container."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "\\-",
        "description": "Text color of the container."
      },
      "fz": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Font size of the container text."
      },
      "rounded": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies border-radius of 5px."
      },
      "ib": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets display to inline-block."
      },
      "abs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to absolute."
      },
      "rela": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to relative."
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to fixed."
      },
      "t": {
        "type": "Top<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `top` value."
      },
      "r": {
        "type": "Right<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `right` value."
      },
      "b": {
        "type": "Bottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `bottom` value."
      },
      "p": {
        "type": "Padding<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding of the container."
      },
      "pt": {
        "type": "PaddingTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding top of the container."
      },
      "pr": {
        "type": "PaddingRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding right of the container."
      },
      "pb": {
        "type": "PaddingBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding bottom of the container."
      },
      "pl": {
        "type": "PaddingLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding left of the container."
      },
      "mt": {
        "type": "MarginTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin top of the container."
      },
      "mr": {
        "type": "MarginRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin right of the container."
      },
      "mb": {
        "type": "MarginBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin bottom of the container."
      },
      "ml": {
        "type": "MarginLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin left of the container."
      },
      "maxW": {
        "type": "MaxWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum width of the container."
      },
      "maxH": {
        "type": "MaxHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum height of the container."
      },
      "minW": {
        "type": "MinWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum width of the container."
      },
      "minH": {
        "type": "MinHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum height of the container."
      },
      "w": {
        "type": "Width<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Width of the container."
      },
      "h": {
        "type": "Height<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Height of the container."
      }
    }
  },
  "Flex": {
    "tags": {},
    "props": {
      "col": {
        "type": "boolean",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "row": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": ""
      },
      "flexWrap": {
        "type": "FlexWrap",
        "required": false,
        "defaultValue": "initial",
        "description": ""
      },
      "alignItems": {
        "type": "AlignItems",
        "required": false,
        "defaultValue": "start",
        "description": ""
      },
      "justifyContent": {
        "type": "JustifyContent",
        "required": false,
        "defaultValue": "normal",
        "description": ""
      },
      "space": {
        "type": "Gap<string | number>",
        "required": false,
        "defaultValue": "0",
        "description": ""
      },
      "box": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies `box-sizing: border-box` to the container."
      },
      "ovh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: hidden`."
      },
      "ova": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: auto`."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, sets width to 100%."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets height to 100%."
      },
      "tl": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the left."
      },
      "tc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the center."
      },
      "tr": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the right."
      },
      "bg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "\\-",
        "description": "Background color of the container."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "\\-",
        "description": "Text color of the container."
      },
      "fz": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Font size of the container text."
      },
      "rounded": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies border-radius of 5px."
      },
      "border": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies a 1px solid border with the specified border color."
      },
      "ib": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets display to inline-block."
      },
      "abs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to absolute."
      },
      "rela": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to relative."
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to fixed."
      },
      "t": {
        "type": "Top<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `top` value."
      },
      "r": {
        "type": "Right<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `right` value."
      },
      "b": {
        "type": "Bottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `bottom` value."
      },
      "l": {
        "type": "Left<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `left` value."
      },
      "borderColor": {
        "type": "BorderColor",
        "required": false,
        "defaultValue": "#dfdfdf",
        "description": "Color of the border."
      },
      "p": {
        "type": "Padding<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding of the container."
      },
      "pt": {
        "type": "PaddingTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding top of the container."
      },
      "pr": {
        "type": "PaddingRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding right of the container."
      },
      "pb": {
        "type": "PaddingBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding bottom of the container."
      },
      "pl": {
        "type": "PaddingLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding left of the container."
      },
      "m": {
        "type": "Margin<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin of the container."
      },
      "mt": {
        "type": "MarginTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin top of the container."
      },
      "mr": {
        "type": "MarginRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin right of the container."
      },
      "mb": {
        "type": "MarginBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin bottom of the container."
      },
      "ml": {
        "type": "MarginLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin left of the container."
      },
      "maxW": {
        "type": "MaxWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum width of the container."
      },
      "maxH": {
        "type": "MaxHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum height of the container."
      },
      "minW": {
        "type": "MinWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum width of the container."
      },
      "minH": {
        "type": "MinHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum height of the container."
      },
      "w": {
        "type": "Width<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Width of the container."
      },
      "h": {
        "type": "Height<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Height of the container."
      },
      "flex": {
        "type": "Flex<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Flex of the container."
      }
    }
  },
  "Title": {
    "tags": {
      "brief": "Renders a heading (`<h1>`–`<h6>`) with automatic theming and optional sticky positioning.",
      "intro": "Automatically selects a heading level (h1–h6) based on the given boolean props.\nStyles the heading with a themed font size and margin. Supports sticky behavior for fixed headers.",
      "example": "import { Title } from '@lite-u/ui'\n\n<Title h2 sticky>Section Title</Title>"
    },
    "props": {
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "inherit",
        "description": "Set text color the element."
      },
      "sticky": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Makes the heading position sticky at the top of its container."
      },
      "h1": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders an h1 element."
      },
      "h2": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders an h2 element."
      },
      "h3": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders an h3 element."
      },
      "h4": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders an h4 element."
      },
      "h5": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders an h5 element."
      },
      "h6": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders an h6 element."
      }
    }
  },
  "Paragraph": {
    "tags": {
      "brief": "Renders a styled `<p>` tag with configurable font size, color, alignment, and word-break behavior.",
      "intro": "Applies theming defaults for spacing and base typography, while allowing per-instance customization\nfor text alignment, font size, color, and word-breaking strategy.",
      "example": "import { Paragraph } from '@lite-u/ui'\nP is an alias of Paragraph\nimport { P } from '@lite-u/ui'\n\n<Paragraph size={14} textColor=\"gray\" center>\n  This is a centered paragraph with custom styling.\n</Paragraph>"
    },
    "props": {
      "size": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "inherit",
        "description": "Custom font size for the paragraph text."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "inherit",
        "description": "Text color of the paragraph."
      },
      "center": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Centers the paragraph text."
      },
      "wb": {
        "type": "WordBreak",
        "required": false,
        "defaultValue": "break-word",
        "description": "Controls word-break behavior (e.g., 'break-word', 'normal')."
      }
    }
  },
  "P": {
    "tags": {},
    "props": {
      "size": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "inherit",
        "description": "Custom font size for the paragraph text."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "inherit",
        "description": "Text color of the paragraph."
      },
      "center": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Centers the paragraph text."
      },
      "wb": {
        "type": "WordBreak",
        "required": false,
        "defaultValue": "break-word",
        "description": "Controls word-break behavior (e.g., 'break-word', 'normal')."
      }
    }
  },
  "Menu": {
    "tags": {
      "brief": "A vertical stack layout component designed for navigation or grouped UI items.",
      "intro": "Arranges its children in a column using Flexbox with configurable spacing.\nUseful for building vertical menus, lists, or grouped controls. Automatically\nsets cursor to pointer and full width, promoting interactive layout.",
      "example": "import { Menu, MenuItem } from '@lite-u/ui'\n\n<Menu space={12}>\n  <MenuItem>Item 1</MenuItem>\n  <MenuItem>Item 2</MenuItem>\n</Menu>"
    },
    "props": {
      "space": {
        "type": "number",
        "required": false,
        "defaultValue": "4",
        "description": "Vertical spacing (gap) between children, in pixels."
      }
    }
  },
  "MenuItem": {
    "tags": {
      "brief": "A flexible interactive item used within menus or lists, with optional size variants and hover transitions.",
      "intro": "Applies consistent dimensions and padding based on selected size (`xs`, `s`, `m`, `l`),\nand shows a transition effect on hover. Integrates theming from Lite UI context.",
      "example": "import { MenuItem } from '@lite-u/ui'\n\n<MenuItem m hoverStyle={{ backgroundColor: 'lightgray' }}>\n  Settings\n</MenuItem>"
    },
    "props": {
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Renders the item in extra-small size."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Renders the item in small size."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Renders the item in medium size."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Renders the item in large size."
      },
      "activeStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{\n          backgroundColor: '#dfdfdf',\n        }",
        "description": "CSS styles to apply on active."
      },
      "hoverStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{\n          backgroundColor: '#dfdfdf',\n        }",
        "description": "CSS styles to apply on hover."
      }
    }
  },
  "Tooltip": {
    "tags": {
      "brief": "Displays a floating label with helpful information when the user hovers over or focuses on the target element.",
      "intro": "Renders a customizable tooltip using React Portals for positioning and transition animations. It calculates the correct position based on the specified direction and adjusts dynamically if the target element moves.",
      "example": "import { Tooltip } from '@lite-u/ui'\n\n<Tooltip title=\"Hello\" placement=\"t\">\n  <button>Hover me</button>\n</Tooltip>"
    },
    "props": {
      "bgColor": {
        "type": "string",
        "required": false,
        "defaultValue": "#333",
        "description": "The background color of the tooltip. Defaults to a neutral color."
      },
      "textColor": {
        "type": "string",
        "required": false,
        "defaultValue": "#fff",
        "description": "The text color of the tooltip. Defaults to a readable color."
      },
      "placement": {
        "type": "TooltipPlacement",
        "required": false,
        "defaultValue": "t",
        "description": "The placement of the tooltip relative to its children. Can be one of:\n`t` , `r` , `b` , `l` , `tl` , `tr` , `bl` , `br`"
      },
      "animationEnterDuration": {
        "type": "number",
        "required": false,
        "defaultValue": "100",
        "description": "Duration of the transition entering, in milliseconds."
      },
      "animationExitDuration": {
        "type": "number",
        "required": false,
        "defaultValue": "100",
        "description": "Duration of the transition leaving, in milliseconds."
      }
    }
  },
  "Con": {
    "tags": {},
    "props": {
      "box": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies `box-sizing: border-box` to the container."
      },
      "ovh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: hidden`."
      },
      "ova": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: auto`."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, sets width to 100%."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets height to 100%."
      },
      "tl": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the left."
      },
      "tc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the center."
      },
      "tr": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the right."
      },
      "bg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "\\-",
        "description": "Background color of the container."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "\\-",
        "description": "Text color of the container."
      },
      "fz": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Font size of the container text."
      },
      "rounded": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies border-radius of 5px."
      },
      "border": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies a 1px solid border with the specified border color."
      },
      "ib": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets display to inline-block."
      },
      "abs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to absolute."
      },
      "rela": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to relative."
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to fixed."
      },
      "t": {
        "type": "Top<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `top` value."
      },
      "r": {
        "type": "Right<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `right` value."
      },
      "b": {
        "type": "Bottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `bottom` value."
      },
      "l": {
        "type": "Left<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `left` value."
      },
      "borderColor": {
        "type": "BorderColor",
        "required": false,
        "defaultValue": "#dfdfdf",
        "description": "Color of the border."
      },
      "p": {
        "type": "Padding<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding of the container."
      },
      "pt": {
        "type": "PaddingTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding top of the container."
      },
      "pr": {
        "type": "PaddingRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding right of the container."
      },
      "pb": {
        "type": "PaddingBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding bottom of the container."
      },
      "pl": {
        "type": "PaddingLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding left of the container."
      },
      "m": {
        "type": "Margin<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin of the container."
      },
      "mt": {
        "type": "MarginTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin top of the container."
      },
      "mr": {
        "type": "MarginRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin right of the container."
      },
      "mb": {
        "type": "MarginBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin bottom of the container."
      },
      "ml": {
        "type": "MarginLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin left of the container."
      },
      "maxW": {
        "type": "MaxWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum width of the container."
      },
      "maxH": {
        "type": "MaxHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum height of the container."
      },
      "minW": {
        "type": "MinWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum width of the container."
      },
      "minH": {
        "type": "MinHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum height of the container."
      },
      "w": {
        "type": "Width<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Width of the container."
      },
      "h": {
        "type": "Height<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Height of the container."
      },
      "flex": {
        "type": "Flex<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Flex of the container."
      }
    }
  },
  "Container": {
    "tags": {
      "brief": "A flexible layout and style container that adapts to various UI layout needs.",
      "intro": "Provides dynamic box, margin, padding, overflow, and size styling through a rich set of shorthand props.\nUseful as a base layout block across components or pages.\n`Con` is an Alias of Container",
      "example": "import { Container } from '@lite-u/ui'\n// Con is an Alias of Container\nimport { Con } from '@lite-u/ui'\n\n<Container p={20} bg=\"#f9f9f9\" fw fh>\n  <h2>Content</h2>\n</Container>"
    },
    "props": {
      "box": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, applies `box-sizing: border-box` to the container."
      },
      "ovh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: hidden`."
      },
      "ova": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, applies `overflow: auto`."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "If true, sets width to 100%."
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, sets height to 100%."
      },
      "tl": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the left."
      },
      "tc": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the center."
      },
      "tr": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, aligns text to the right."
      },
      "bg": {
        "type": "BackgroundColor",
        "required": false,
        "defaultValue": "\\-",
        "description": "Background color of the container."
      },
      "textColor": {
        "type": "Color",
        "required": false,
        "defaultValue": "\\-",
        "description": "Text color of the container."
      },
      "fz": {
        "type": "FontSize<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Font size of the container text."
      },
      "rounded": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies border-radius of 5px."
      },
      "border": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, applies a 1px solid border with the specified border color."
      },
      "ib": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets display to inline-block."
      },
      "abs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to absolute."
      },
      "rela": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to relative."
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "\\-",
        "description": "If true, sets position to fixed."
      },
      "t": {
        "type": "Top<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `top` value."
      },
      "r": {
        "type": "Right<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `right` value."
      },
      "b": {
        "type": "Bottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `bottom` value."
      },
      "l": {
        "type": "Left<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "The CSS `left` value."
      },
      "borderColor": {
        "type": "BorderColor",
        "required": false,
        "defaultValue": "#dfdfdf",
        "description": "Color of the border."
      },
      "p": {
        "type": "Padding<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding of the container."
      },
      "pt": {
        "type": "PaddingTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding top of the container."
      },
      "pr": {
        "type": "PaddingRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding right of the container."
      },
      "pb": {
        "type": "PaddingBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding bottom of the container."
      },
      "pl": {
        "type": "PaddingLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Padding left of the container."
      },
      "m": {
        "type": "Margin<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin of the container."
      },
      "mt": {
        "type": "MarginTop<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin top of the container."
      },
      "mr": {
        "type": "MarginRight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin right of the container."
      },
      "mb": {
        "type": "MarginBottom<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin bottom of the container."
      },
      "ml": {
        "type": "MarginLeft<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Margin left of the container."
      },
      "maxW": {
        "type": "MaxWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum width of the container."
      },
      "maxH": {
        "type": "MaxHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Maximum height of the container."
      },
      "minW": {
        "type": "MinWidth<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum width of the container."
      },
      "minH": {
        "type": "MinHeight<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Minimum height of the container."
      },
      "w": {
        "type": "Width<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Width of the container."
      },
      "h": {
        "type": "Height<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Height of the container."
      },
      "flex": {
        "type": "Flex<string | number>",
        "required": false,
        "defaultValue": "\\-",
        "description": "Flex of the container."
      }
    }
  },
  "Collapse": {
    "tags": {
      "brief": "A collapsible container that shows or hides its content with a smooth transition.",
      "intro": "Renders a toggleable header and a content area that expands or collapses with animation.\nUseful for accordion-like UI components or sections where content needs to be shown/hidden on demand.",
      "example": "import Collapse from '@lite-u/ui'\n\n<Collapse head=\"Click me\">\n  <p>This content is hidden or shown based on the collapse state.</p>\n</Collapse>"
    },
    "props": {
      "head": {
        "type": "ReactNode",
        "required": true,
        "defaultValue": "\\-",
        "description": "The clickable header element that toggles the collapse."
      },
      "headStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "\\-",
        "description": "Inline styles applied to the clickable header element."
      },
      "contentStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "\\-",
        "description": "Inline styles applied to the collapsible content container."
      },
      "duration": {
        "type": "number",
        "required": false,
        "defaultValue": "\\-",
        "description": "Duration of the enter transition in milliseconds."
      },
      "exitDuration": {
        "type": "number",
        "required": false,
        "defaultValue": "\\-",
        "description": "Duration of the leave transition in milliseconds."
      },
      "onToggle": {
        "type": "(isOpen: boolean) => void",
        "required": false,
        "defaultValue": "\\-",
        "description": "Callback fired when the collapse is toggled. Receives the new open state."
      }
    }
  },
  "Drop": {
    "tags": {
      "brief": "A drag-and-drop file drop zone with file type validation and customizable events.",
      "intro": "In React, applying visual cues during drag-over can sometimes cause flickering—especially when styles update frequently. The Drop component simplifies handling such interactions by managing drag-over feedback smoothly and supporting MIME-type restrictions. It also provides hooks for custom logic when files are dropped, making it an easy and reliable way to implement drag-and-drop functionality.\n\n\\\n⚠️ `Caution`: Safari `CANNOT` detect files during the drag phase, so use `onDropped` ONLY for any functionality that needs to work reliably across all browsers.",
      "example": "import { Drop } from '@lite-u/ui'\n\n<Drop accepts={['image/png']}\n  onDragIsOver={(f) => {})\n  onDropped={(e, isValid) => console.log(e, isValid)}\n>\n  <p>Drop image files here</p>\n</Drop>"
    },
    "props": {
      "accepts": {
        "type": "string[]",
        "required": false,
        "defaultValue": "[]",
        "description": "List of accepted MIME types. Wildcards like 'image/*' are supported."
      },
      "onDragIsOver": {
        "type": "(isFileTypeValid: boolean) => void",
        "required": false,
        "defaultValue": "\\-",
        "description": "Callback triggered when a valid drag enters the drop zone."
      },
      "onDragIsLeave": {
        "type": "() => void",
        "required": false,
        "defaultValue": "\\-",
        "description": "Callback triggered when dragging leaves the drop zone.\n\n>Note: Safari does not reliably detect dragged files, and the onDragIsOver event is not supported in this browser."
      },
      "onDropped": {
        "type": "(e: DragEvent<HTMLDivElement>, isFileTypeValid: boolean) => void",
        "required": false,
        "defaultValue": "\\-",
        "description": "Callback triggered when a file is dropped.\nProvides the event and a flag indicating file type validity."
      }
    }
  },
  "NotificationProvider": {
    "tags": {
      "brief": "Provides notification context and renders toasts with animation and auto-dismiss(optional) behavior.",
      "intro": "Wraps an application with a notification system. Allows components to trigger toast messages\nwith customizable content, type, and duration. Renders floating notifications using portals\nwith enter/exit animations, and removes them after a timeout(optional).",
      "example": "import { useNotification } from '@lite-u/ui'\n\nconst NotificationSampleSimple: React.FC = () => {\n   const { add, remove } = useNotification()\n\n   return <div onClick={()=>add('hello')}></div>\n}"
    },
    "props": {}
  },
  "Interactable": {
    "tags": {},
    "props": {
      "tag": {
        "type": "keyof HTMLElementTagNameMap",
        "required": false,
        "defaultValue": "div",
        "description": ""
      },
      "hover": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "focus": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "active": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "style": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "disabled": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": ""
      },
      "onMouseEnter": {
        "type": "MouseEventHandler<HTMLElementTagNameMap[T]> & (MouseEventHandler<HTMLDivElement> | ... 59 more ... | MouseEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onMouseLeave": {
        "type": "MouseEventHandler<HTMLElementTagNameMap[T]> & (MouseEventHandler<HTMLDivElement> | ... 59 more ... | MouseEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onFocus": {
        "type": "FocusEventHandler<HTMLElementTagNameMap[T]> & (FocusEventHandler<HTMLDivElement> | ... 59 more ... | FocusEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onBlur": {
        "type": "FocusEventHandler<HTMLElementTagNameMap[T]> & (FocusEventHandler<HTMLDivElement> | ... 59 more ... | FocusEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onPointerDown": {
        "type": "PointerEventHandler<HTMLElementTagNameMap[T]> & (PointerEventHandler<HTMLDivElement> | ... 59 more ... | PointerEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onPointerUp": {
        "type": "PointerEventHandler<HTMLElementTagNameMap[T]> & (PointerEventHandler<HTMLDivElement> | ... 59 more ... | PointerEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onClick": {
        "type": "MouseEventHandler<HTMLElementTagNameMap[T]> & (MouseEventHandler<HTMLDivElement> | ... 59 more ... | MouseEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      },
      "onKeyDown": {
        "type": "KeyboardEventHandler<HTMLElementTagNameMap[T]> & (KeyboardEventHandler<HTMLDivElement> | ... 59 more ... | KeyboardEventHandler<...>)",
        "required": false,
        "defaultValue": "",
        "description": ""
      }
    }
  },
  "Table": {
    "tags": {
      "brief": "A simple and easy-to-use table component with a minimal design.",
      "intro": "Table accepts `TableRow` Component as children only",
      "example": "import { Table, TableRow } from '@lite-u/ui'\n\n<Table>\n  <TableRow head>\n    <span>th cell 0</span>\n    <span>th cell 1</span>\n  </TableRow>\n  <TableRow>\n    <span>td cell 0</span>\n    <span>td cell 1</span>\n  </TableRow>\n</Table>"
    },
    "props": {
      "xs": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Render the table with extra small (`xs`) size styling."
      },
      "s": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Render the table with small (`s`) size styling."
      },
      "m": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Render the table with medium (`s`) size styling."
      },
      "l": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Render the table with large (`l`) size styling."
      },
      "fw": {
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Whether the table should take up the full width of its parent"
      },
      "fh": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Whether the table should take up the full height of its parent"
      },
      "fixed": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Whether the [tableLayout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) should be set to `fixed`"
      },
      "rowStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": "Convenience way to style all table rows"
      },
      "rowHoverStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": "Convenience way to style Hovered body rows"
      },
      "cellStyle": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": "Style object for table cells"
      }
    }
  },
  "TableRow": {
    "tags": {
      "brief": "Represents a table row for use within the Table component.",
      "intro": "Renders a styled `<tr>` element with automatically applied context-based row and cell styling.\n\nCan optionally render as a header row using the `head` prop.\n\nTableRow with `head` prop: recognized as a `thead` row\n\nTableRow without `head` prop: recognized as a `tbody` row\n\nTableRow doesn’t require `td`(or `th`) — its children are automatically wrapped in <td>(or `th`) tags.",
      "example": "import { Table, TableRow } from '@lite-u/ui'\n\n<Table>\n    <TableRow head>\n      <h1>th cell 0</h1>\n      <h2>th cell 1</h2>\n    </TableRow>\n    <TableRow>\n      <div>td cell 0</div>\n      <p>td cell 1</p>\n    </TableRow>\n</Table>"
    },
    "props": {
      "head": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, renders the row using `<th>` elements instead of `<td>`, and wrap into `<thead>` rather than `<tbody>`."
      }
    }
  },
  "Hover": {
    "tags": {
      "brief": "A hover-triggered wrapper that reveals content based on mouse interactions.",
      "intro": "Wraps `HoverHead` and `HoverBody` components to provide tooltip or popover-like functionality.\nIt manages visibility and optional persistence of content based on hover state, with customizable delay and trigger behavior.",
      "example": "import { Hover, HoverHead, HoverBody } from '@lite-u/ui'\n\n<Hover delay={200} persistMode>\n  <HoverHead>Hover me</HoverHead>\n  <HoverBody>This content shows on hover</HoverBody>\n</Hover>"
    },
    "props": {
      "delay": {
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "Delay in milliseconds before hiding the hover content after mouse leaves."
      },
      "onlyTriggerByHead": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "If true, hover effects are triggered only when hovering over the `HoverHead` element,\nand `HoverBody` will disappear when the mouse leaves the `HoverHead`."
      },
      "persistMode": {
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Enables persistent display mode, where hover state is managed logically and content is not removed from the DOM,\nbut instead controlled via display (display: none)."
      },
      "style": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": ""
      }
    }
  },
  "HoverHead": {
    "tags": {},
    "props": {}
  },
  "HoverBody": {
    "tags": {},
    "props": {
      "style": {
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{}",
        "description": ""
      }
    }
  },
  "src": {
    "tags": {},
    "props": {}
  }
}